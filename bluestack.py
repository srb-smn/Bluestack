# -*- coding: utf-8 -*-
"""Bluestack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JJ30iGXDuBzwZKBaXllm1gNeqBRaYdzH

!pip install discord
!pip install fuzzywuzzy
!pip install python-Levenshtein
"""

import discord
from discord.ext import commands
import requests
from bs4 import BeautifulSoup
import pandas as pd
from fuzzywuzzy import process,fuzz

#Function to parse html and return data from google results
def parse_results(html, keyword):
    soup = BeautifulSoup(html, 'html.parser')

    found_results = []
    rank = 1
    result_block = soup.find_all('div', attrs={'class': 'g'})
    for result in result_block:

        link = result.find('a', href=True)
        title = result.find('h3')
        description = result.find('span', attrs={'class': 'st'})
        if link and title:
            link = link['href']
            title = title.get_text()
            if description:
                description = description.get_text()
            if link != '#':
                found_results.append({'keyword': keyword,'title': title, 'link': link,
                                      'description': description})
                rank += 1
    return found_results

#google api to query and return list of search results
USER_AGENT = {
"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36"
    }
def google_api(query=''):
  google_url = """https://www.google.com/search?q={}&num=10""".format(query.replace(' ', '+'))
  response = requests.get(google_url, headers=USER_AGENT)
  results = parse_results(response.text, query)
  return results

#In absence of sql invironment, using pandas to simulate database insert and select
def database_insert_fetch(results):
  try:
    #If the searched keyword exist in file replace else add result
    df = pd.DataFrame(columns=['keyword','title','link','description'])
    df = pd.read_csv('data.csv')
    kw = results[0]['keyword']
    df = df[df.keyword != kw]
    #df = pd.DataFrame(columns=['keyword','title','link','description'])
  except:
    df = pd.DataFrame(columns=['keyword','title','link','description'])
  temp = pd.DataFrame(results)
  df = df.append(temp)
  df.to_csv('data.csv',index=False)
  return df

def database_select():
  try:
    df = pd.read_csv('data.csv')
    #df = pd.DataFrame(columns=['keyword','title','link','description'])
  except:
    df = pd.DataFrame(columns=['keyword','title','link','description'])
  return df

#Returns query results and saves the result
def search(query=''):
  results = google_api(query)
  all_data = database_insert_fetch(results)
  results = results[:5]
  t_list=[]
  for l in results:
    t_list.append(l['title']+' : '+l['link'])
  output = '\n'.join(t_list)
  return output

#called when recent is executed, filters results based on fuzzy wuzzy logic
def search_with_history(query=''):
  #results = google_api(query)
  all_data = database_select()
  all_data['temp'] = all_data['title']+' ' +all_data['keyword']
  temp = list(all_data['temp'])
  match = process.extract(query, temp, scorer=fuzz.token_sort_ratio, limit=5)
  match = [a for a in match if a[1]>20]
  kwords = [l[0] for l in match]
  all_data = all_data.loc[all_data['temp'].isin(kwords)]
  all_data['op'] = all_data['title'] + ' : ' + all_data['link']
  t_list = list(all_data['op'].values)
  output = '\n'.join(t_list)
  output = 'No Search History' if output=='' else output
  return output

client = commands.Bot(command_prefix='!')
@client.event
async def on_ready():
    print("Bot is ready")

@client.command()
async def google(ctx, *, query):
    response = search(query)
    await ctx.send(f"Results:\n{response}")

@client.command()
async def recent(ctx, *, keyword):
    response = search_with_history(keyword)
    await ctx.send(f"Results from recent history:\n{response}")

@client.event
async def on_message(message):
    if message.content.lower() == 'hi':
        await message.channel.send('Hey!')
    else:
        await client.process_commands(message)

client.run('Njk5NTE1NDA4MDU0NjE2MTE0.XpWe3Q.gofHarCyy0W7BUBBvcE3G1qskZk')